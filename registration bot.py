import telebot
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import time

import datetime
from datetime import datetime

import pandas as pd

import os


BOT_TOKEN='6581012402:AAEoFDiSXeAJ1Es1heqqEESd-gLgpnTt4EM'

bot = telebot.TeleBot(BOT_TOKEN)

path_to_statistic='D:/nur_bot/registration bot/data.csv'

start_stop=True


#id –î–µ–Ω–∏—Å–∞
den_id=123704982
my_id=644440906

class registration(StatesGroup):
    fio_ans = State() 
    phone_ans = State()
    company_ans= State()
    age_ans= State()


@bot.message_handler(commands=["start"])
def start(message):
    first_msg="–ü—Ä–∏–≤–µ—Ç!"
    bot.send_message(message.chat.id, first_msg, reply_markup=None)
    second_msg="""–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∏–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –Ω–∞ –¢–ê–ö–û–ï-–¢–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–≤–µ–¥–∏—Ç–µ /register"""
    # markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
    # markup.add(types.KeyboardButton("–î–∞"))
    # markup.add(types.KeyboardButton("–ù–µ—Ç"))
    bot.send_message(message.chat.id, second_msg, reply_markup=None)


@bot.message_handler(commands=["register"])
def register_start(message):
    if (check_user(message.chat.id)=='not_passed'):
        bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
        bot.register_next_step_handler(message, register_name)
    else:
        bot.send_message(message.chat.id, text='–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!', reply_markup=None)

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
def register_name(message):
    name = message.text
    bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é, –≥–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ/—É—á–∏—Ç–µ—Å—å:')
    bot.register_next_step_handler(message, register_company, name)

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–∏–∏
def register_company(message, name):
    company = message.text
    bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')
    bot.register_next_step_handler(message, register_age, name, company)

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
def register_age(message, name, company):
    age = message.text
    if (age.isdigit() and int(age) >= 120):
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!')
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:', reply_markup=None)
        bot.register_next_step_handler(message, register_age, name, company)
    else:
        statistics_write(message.chat.id, message.chat.username, name, company, age)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, text= f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–ò–º—è: {name}\n–ö–æ–º–ø–∞–Ω–∏—è: {company}\n–í–æ–∑—Ä–∞—Å—Ç: {age}',  reply_markup=None)

@bot.message_handler(content_types=['text'])
def message(message):
    if (message.text=='root' and (message.chat.id==den_id or message.chat.id==my_id)):
        markup=types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton("Start/stop"))
        markup.add(types.KeyboardButton("Clear data.csv"))
        markup.add(types.KeyboardButton("Cooldown"))
        markup.add(types.KeyboardButton("Exit"))
        bot.send_message(message.chat.id, text="ROOT: –í—ã –≤–æ—à–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ root",reply_markup=markup)

    #–≤—ã—Ö–æ–¥ –∏—Ö —Ä—É—Ç –ø—Ä–∞–≤
    elif(message.text=="Exit" and (message.chat.id==my_id or message.chat.id==den_id)):
        bot.send_message(message.chat.id, text="–¢–µ–ø–µ—Ä—å –≤—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", reply_markup=None)
    
    #on-off bot
    elif (message.text=='Start/stop' and (message.chat.id==den_id or message.chat.id==my_id)):
        global start_stop
        if (start_stop): 
            start_stop=False
            bot.send_message(message.chat.id, text="ROOT: bot is OFF", reply_markup=None)
        else:
            start_stop=True
            bot.send_message(message.chat.id, text="ROOT: bot is ON", reply_markup=None)

    elif (message.text=='Clear data.csv' and (message.chat.id==den_id or message.chat.id==my_id)):
        statistics={'data': [1],
                'user_id': [1],
                'username': [1],
                'name': [1],
                'company': [1],
                'age':[1]}  
        cldf=pd.read_csv(path_to_statistic)
        cldf= cldf[0:0] 
        cldf.to_csv(path_to_statistic, index = False)
        bot.send_message(message.chat.id, text="ROOT: –§–∞–π–ª data.csv –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω. –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
                          reply_markup=None)

    #cooldown
    elif (message.text=='Cooldown' and (message.chat.id==den_id or message.chat.id==my_id)):
        bot.send_message(message.chat.id, text="–ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥", reply_markup=None)
        time.sleep(60)


    else:
        send_msg="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòî"
        bot.send_message(message.chat.id, send_msg, reply_markup=None)
        bot.send_message(message.chat.id, text="–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üò¢", reply_markup=None)

#–∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def statistics_write(user_id, username, name, company, age):
    data = datetime.today().strftime("%Y-%m-%d-%H-%M")
    statistics={'data': [data],
                'user_id': [user_id],
                'username': [username],
                'name': [name],
                'company': [company],
                'age':[age]}  
    df = pd.DataFrame(statistics)
    #print(df)
    #df.to_csv(path_to_statistic, index = False) 
    old_df = pd.read_csv(path_to_statistic)
    result=pd.concat([old_df,df])
    result.to_csv(path_to_statistic, index = False)   

#–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
def check_user(user_id):
    df = pd.read_csv(path_to_statistic)
    text_return='not_passed'
    for num, user_from_file in enumerate(df["user_id"]):
        if (user_from_file==user_id):
            text_return='passed'
            break;
    return text_return

bot.polling(non_stop=True)