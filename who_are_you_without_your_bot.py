import telebot
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤


bot = telebot.TeleBot('6581012402:AAEoFDiSXeAJ1Es1heqqEESd-gLgpnTt4EM')


"""questions = {"–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º —Ä–æ–º–∞–Ω–∞ ¬´–í–æ–π–Ω–∞ –∏ –º–∏—Ä¬ª?": ["–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤–∫—Å–∏–π", "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–æ–ª–∂–Ω–µ—Ü—ã–Ω", "–ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤"], 
             "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –º—É–¥—Ä–æ—Å—Ç–∏ –≤–æ –º–Ω–æ–≥–∏—Ö –∫—É–ª—å—Ç—É—Ä–∞—Ö?": ["–°–æ–≤–∞", "–õ–µ–≤", "–û—Ä–µ–ª", "–í–æ–ª–∫"],
             '–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º, —Å—Ç—É–ø–∏–≤—à–∏–º –Ω–∞ –õ—É–Ω—É?': ["–Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω", "–ù–∏–ª –ê—Ä–º—Å—Ç—Ä–æ–Ω–≥", "–ë–∞–∑ –û–ª–¥—Ä–∏–Ω", "–î–∂–æ–Ω –ì–ª–µ–Ω"],
             "–ö–∞–∫–∞—è –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏?": ["–°–®–ê", "–ö–∞–Ω–∞–¥–∞", "–ö–∏—Ç–∞–π", "–ò–Ω–¥–∏—è"]}"""

questions = {"question": ["–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º —Ä–æ–º–∞–Ω–∞ ¬´–í–æ–π–Ω–∞ –∏ –º–∏—Ä¬ª?", "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –º—É–¥—Ä–æ—Å—Ç–∏ –≤–æ –º–Ω–æ–≥–∏—Ö –∫—É–ª—å—Ç—É—Ä–∞—Ö?",
                          '–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º, —Å—Ç—É–ø–∏–≤—à–∏–º –Ω–∞ –õ—É–Ω—É?', "–ö–∞–∫–∞—è –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏?"],
            'answer1': ["–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤–∫—Å–∏–π", "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–æ–ª–∂–Ω–µ—Ü—ã–Ω", "–ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤"], 
             "answer2": ["–°–æ–≤–∞", "–õ–µ–≤", "–û—Ä–µ–ª", "–í–æ–ª–∫"],
             'answer3': ["–Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω", "–ù–∏–ª –ê—Ä–º—Å—Ç—Ä–æ–Ω–≥", "–ë–∞–∑ –û–ª–¥—Ä–∏–Ω", "–î–∂–æ–Ω –ì–ª–µ–Ω"],
             "answer4": ["–°–®–ê", "–ö–∞–Ω–∞–¥–∞", "–ö–∏—Ç–∞–π", "–ò–Ω–¥–∏—è"]}

answers = [["–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤–∫—Å–∏–π", "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–æ–ª–∂–Ω–µ—Ü—ã–Ω", "–ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤"],
           ["–°–æ–≤–∞", "–õ–µ–≤", "–û—Ä–µ–ª", "–í–æ–ª–∫"],
           ["–Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω", "–ù–∏–ª –ê—Ä–º—Å—Ç—Ä–æ–Ω–≥", "–ë–∞–∑ –û–ª–¥—Ä–∏–Ω", "–î–∂–æ–Ω –ì–ª–µ–Ω"],
           ["–°–®–ê", "–ö–∞–Ω–∞–¥–∞", "–ö–∏—Ç–∞–π", "–ò–Ω–¥–∏—è"]]


@bot.message_handler(commands=['start'])
def start(message):

    city = {'–ì–æ—Ä–æ–¥': ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'],
        '–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è': [1147, 1703, 1893, 1723], 
        '–ù–∞—Å–µ–ª–µ–Ω–∏–µ': [11.9, 4.9, 1.5, 1.4]} #–°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–æ–¥–∞—Ö.
 
    #df = pd.DataFrame(questions)
    #df.to_csv('D:/nur_bot/who_are_you_without_your_bot/Questions.csv', index = False) 
    
    #df = pd.read_csv('D:/nur_bot/who_are_you_without_your_bot/GfG.csv')
    
    #df = pd.read_csv('D:/nur_bot/who_are_you_without_your_bot/Questions.csv')

    #print(df.answer1)
    first_mess = "–ü—Ä–∏–≤–µ—Ç!"
    markup = types.InlineKeyboardMarkup()
    bot.send_message(message.chat.id, first_mess, reply_markup=markup)
    second_mess="–¢–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã üòÅ"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("–û–ö")
    markup.add(btn1)
    bot.send_message(message.chat.id, second_mess, reply_markup=markup)
    

@bot.message_handler(content_types=['text'])

def question(message):

    if (message.text=="–û–ö"):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("next", callback_data='next'))
        """for num, ans in enumerate(answers):
          markup.row(types.InlineKeyboardButton(ans))
          ans=answers[num]
          markup.add(types.KeyboardButton(ans[0]))
          markup.add(types.InlineKeyboardButton(ans[1]))
          markup.add(types.InlineKeyboardButton(ans[2]))
          markup.add(types.InlineKeyboardButton(ans[3]))
          question_msg=f"{num+1}. {question}"
          bot.send_message(message.chat.id, question_msg, reply_markup=markup)
          bot.register_callback_query_handler(message, statistics)"""

        bot.send_message(message.chat.id, text='Tap, please', reply_markup=markup)

@bot.callback_query_handler(func=lambda query: True)
def handler(query):
    if (query.data =="next"):
        #markup=types.InlineKeyboardButton()
        #markup.add(types.InlineKeyboardButton("done", callback_data="done"))
        bot.edit_message_text(text='tnx', chat_id=query.message.chat.id, message_id=query.message.id, reply_markup=None)

import csv
import datetime
import os
import pandas as pd
import time

def statistics(message):
   user_id=message.user_id
   answer=message.text
   bot.send_message(message.chat_id, text="hi")
   time.sleep(50000)
   """df = pd.read_csv('test.csv', names=['data','user_id','answer'])
   print(pd)
   data = datetime.datetime.today().strftime("%Y-%m-%d-%H-%M")
   with open('test.csv', 'a', newline="", encoding='UTF-8') as fil:
        wr = csv.writer(fil, delimiter=',')
        wr.writerow([data, user_id, answer])"""
   

bot.polling(non_stop=True)